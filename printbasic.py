# 1.화면에 Hello World 문자열을 출력하세요.
print('Hello World')
# 2.화면에 Mary's cosmetics을 출력하세요. (중간에 '가 있음에 주의하세요)
print("Mary's cosmetics")
# 3.신씨가 소리질렀다. "도둑이야".출력하세여
print('신씨가소리질렀다. "도둑이야"')
# 4.화면에 "C:\Windows"를 출력하세요.
print("C:\Windows")
# 5.코드를 실행해보고 \n과 \t의 역할을 설명하시오
print("안녕하세요.\n만나서\t\t반갑습니다.")
#\n은 줄바꿈이고 \t는 탭입니다.
# 6.print 함수에 두 개의 단어를 입력한 예제입니다. 아래 코드의 출력 결과를 예상해봅시다.
# print ("오늘은", "일요일")
# 오늘은 일요일
# 7.print() 함수를 사용하여 다음과 같이 출력하세요. naver;kakao;sk;samsung
print('naver', 'kakao', 'sk', 'samsung', sep=';')
# 8.print() 함수를 사용하여 다음과 같이 출력하세요. naver/kakao/sk/samsung
print('naver', 'kakao', 'sk', 'samsung', sep='/')
# 9.다음 코드를 수정하여 줄바꿈이 없이 출력하세요. (힌트: end='') print 함수는 두 번 사용합니다. 세미콜론 (;)은 한줄에 여러 개의 명령을 작성하기 위해 사용합니다.
# print("first");print("second")
print("first", end = "");print("second")
# 10.5/3의 결과를 화면에 출력하세요.
print(5/3)
# ------------------------------------------------------------------2023-03-27--------------------------------------------------------------------------------
# 11.삼성전자라는 변수로 50,000원을 바인딩해보세요. 삼성전자 주식 10주를 보유하고 있을 때 총 평가금액을 출력하세요.
삼성전자 = 50000
평가금액 = 삼성전자 * 10
print(평가금액)
# 12.다음 표는 삼성전자의 일부 투자정보입니다. 변수를 사용해서 시가총액, 현재가, PER 등을 바인딩해보세요.
시가총액 = 29800000000
현재가 = 50000
PER = 15.79
print(시가총액, type(시가총액))
print(현재가, type(현재가))
print(PER, type(PER))
# 13.변수 s와 t에는 각각 문자열이 바인딩 되어있습니다. 두 변수를 이용하여 아래와 같이 출력해보세요. hello! python
s = "hello"
t = "python"
print(s + "!", t)
# ------------------------------------------------------------------2023-03-28--------------------------------------------------------------------------------
# 14.아래 코드의 실행 결과를 예상해보세요. >> 2 + 2 * 3 -> 8
result = 2+2*3
print(result)
# 15.type() 함수는 데이터 타입을 판별합니다. 변수 a에는 128 숫자가 바인딩돼 있어 type 함수가 int (정수)형임을 알려줍니다. 
# a = 128
# print(type(a))
# 아래 변수에 바인딩된 값의 타입을 판별해보세요. >> a = "132" --> string
a = "132"
print(type(a))
# 16.문자열 '720'를 정수형으로 변환해보세요.
num_str = "720"
num_int = int(num_str)
print(num_int, type(num_int))
# ------------------------------------------------------------------2023-03-29--------------------------------------------------------------------------------
# 17.정수 100을 문자열 '100'으로 변환해보세요. num = 100
num = 100
num_string = str(num)
print(num_string, type(num_string))
# 18.문자열 "15.79"를 실수(float) 타입으로 변환해보세요.
float_str = "15.79"
float = float(float_str)
print(float, type(float))
# 19.year라는 변수가 문자열 타입의 연도를 바인딩하고 있습니다. 이를 정수로 변환한 후 최근 3년의 연도를 화면에 출력해보세요. year = "2023"
year = "2023"
int_year = int(year)
print(int_year - 3)
print(int_year - 2)
print(int_year - 1)
# ------------------------------------------------------------------2023-03-30--------------------------------------------------------------------------------
# 20.에이컨이 월 48,584원에 무이자 36개월의 조건으로 홈쇼핑에서 판매되고 있습니다. 총 금액은 계산한 후 이를 화면에 출력해보세요. (변수사용하기)
air = 48584
money = air * 36
print(money)
# 21.letters가 바인딩하는 문자열에서 첫번째와 세번째 문자를 출력하세요.
letters = 'python'
print(letters[0], letters[2])
# 22.자동차 번호가 다음과 같을 때 뒤에 4자리만 출력하세요. >> license_plate = "24가 2210"
license_plate = "24가 2210"
print(license_plate[-4:])
# ------------------------------------------------------------------2023-03-31--------------------------------------------------------------------------------
# 23.아래의 문자열에서 '홀' 만 출력하세요.
str = "홀짝홀짝홀짝"
print(str[::2])
# 24.문자열을 거꾸로 뒤집어 출력하세요.
string = "PYTHON"
print(string[::-1])
# 25.아래의 전화번호에서 하이푼 ('-')을 제거하고 출력하세요.
phone_number = "010-1111-2222"
print(phone_number.replace("-"," "))
# ------------------------------------------------------------------2023-04-01--------------------------------------------------------------------------------
# 26.25번 문제의 전화번호를 아래와 같이 모두 붙여 출력하세요.
phone_number = "010-1111-2222"
print(phone_number.replace("-",""))
# 27.url 에 저장된 웹 페이지 주소에서 도메인을 출력하세요.
url = "http://sharebook.kr"
url2 = url.split('.')
print(url2[-1])
# 28.아래 코드의 실행 결과를 예상해보세요.
#lang = 'python'
#lang[0] = 'P'
#print(lang)
# 에러난다.
# ------------------------------------------------------------------2023-04-02--------------------------------------------------------------------------------
# 29.아래 문자열에서 소문자 'a'를 대문자 'A'로 변경하세요.
string = 'abcdfe2a354a32a'
print(string.replace('a', 'A'))
# 30.아래 코드의 실행 결과를 예상해보세요.
string = 'abcd'
string.replace('b', 'B')
print(string)
# abcd
# 31.아래 코드의 실행 결과를 예상해보세요.
a = "3"
b = "4"
print(a + b)
# 답 : 34
# ------------------------------------------------------------------2023-04-03--------------------------------------------------------------------------------
# 32.아래 코드의 실행 결과를 예상해보세요. >> print("Hi" * 3)
# 답 : HiHiHi
# 33.화면에 '-'를 80개 출력하세요.
print("-" * 80)
# 34.변수에 다음과 같은 문자열이 바인딩되어 있습니다.
t1 = 'python' 
t2 = 'java'
print((t1 + " " + t2 + " ") * 4)
# ------------------------------------------------------------------2023-04-04--------------------------------------------------------------------------------
# 35.변수에 다음과 같이 문자열과 정수가 바인딩되어 있을 때 % formatting을 사용해서 다음과 같이 출력해보세요.
name1 = "김민수" 
age1 = 10
name2 = "이철희"
age2 = 13
print("이름 : %s 나이 : %d" % (name1, age1))
print("이름 : %s 나이 : %d" % (name2, age2))
# 36.문자열의 format( ) 메서드를 사용해서 035번 문제를 다시 풀어보세요.
print("이름 : {name1} 나이 : {age1}".format(name1 = "김민수", age1 = 10))
print("이름 : {name2} 나이 : {age2}".format(name2 = "이철희", age2 = 13))
# 37.파이썬 3.6부터 지원하는 f-string을 사용해서 035번 문제를 다시 풀어보세요.
name1 = "김민수" 
age1 = 10
name2 = "이철희"
age2 = 13
result = f"이름 : {name1} 나이 : {age1}"
result1 = f"이름 : {name2} 나이 : {age2}"
print(result)
print(result1)
# ------------------------------------------------------------------2023-04-05--------------------------------------------------------------------------------
# 38.삼성전자의 상장주식수가 다음과 같습니다. 컴마를 제거한 후 이를 정수 타입으로 변환해보세요.
상장주식수 = "5,969,782,550"
rep_sam = 상장주식수.replace(',',"")
type_sam = int(rep_sam)
print(type_sam, type(type_sam))
# 39.다음과 같은 문자열에서 '2020/03'만 출력하세요.
분기 = "2020/03(E) (IFRS연결)"
print(분기[:7])
# 40.문자열의 좌우의 공백이 있을 때 이를 제거해보세요.
data = "   삼성전자    "
delete_da = data.strip()
print(delete_da)
# ------------------------------------------------------------------2023-04-06--------------------------------------------------------------------------------
# 41.다음과 같은 문자열이 있을 때 이를 대문자 BTC_KRW로 변경하세요.
ticker = "btc_krw"
print(ticker.upper())
# 42.다음과 같은 문자열이 있을 때 이를 소문자 btc_krw로 변경하세요.
ticker = "BTC_KRW"
print(ticker.lower())
# 43.문자열 'hello'가 있을 때 이를 'Hello'로 변경해보세요.
str_hel = 'hello'
print(str_hel.capitalize())
# ------------------------------------------------------------------2023-04-07--------------------------------------------------------------------------------
# 44.파일 이름이 문자열로 저장되어 있을 때 endswith 메서드를 사용해서 파일 이름이 'xlsx'로 끝나는지 확인해보세요.
file_name = "보고서.xlsx"
name = file_name.endswith("xlsx")
print(name)
# 45.파일 이름이 문자열로 저장되어 있을 때 endswith 메서드를 사용해서 파일 이름이 'xlsx' 또는 'xls'로 끝나는지 확인해보세요.
file_name = "보고서.xlsx"
name = file_name.endswith(("xlsx", "xls"))
print(name)
# 46.파일 이름이 문자열로 저장되어 있을 때 startswith 메서드를 사용해서 파일 이름이 '2020'로 시작하는지 확인해보세요.
file_name = "2020_보고서.xlsx"
name_fi = file_name.startswith("2020")
print(name_fi)
# ------------------------------------------------------------------2023-04-08--------------------------------------------------------------------------------
# 47.다음과 같은 문자열이 있을 때 공백을 기준으로 문자열을 나눠보세요.
a = "hello world"
a.split()
# 48.다음과 같이 문자열이 있을 때 btc와 krw로 나눠보세요.
ticker = "btc_krw"
ticker.split("_")
# 49.다음과 같이 날짜를 표현하는 문자열이 있을 때 연도, 월, 일로 나눠보세요.
date = "2020-05-01"
date.split("-")
# ------------------------------------------------------------------2023-04-09--------------------------------------------------------------------------------
# 50.문자열의 오른쪽에 공백이 있을 때 이를 제거해보세요.
data = "039490     "
data.rstrip()
# 51.2016년 11월 영화 예매 순위 기준 top3는 다음과 같습니다. 영화 제목을 movie_rank 이름의 리스트에 저장해보세요. (순위 정보는 저장하지 않습니다.)
movie_rank = ["닥터 스트레인지", "스플릿", "럭키"]
# 52.51의 movie_rank 리스트에 "배트맨"을 추가하라.
movie_rank = ["닥터 스트레인지", "스플릿", "럭키"]
movie_rank.append("배트맨")
print(movie_rank)
# ------------------------------------------------------------------2023-04-10--------------------------------------------------------------------------------
# 53.movie_rank 리스트에는 아래와 같이 네 개의 영화 제목이 바인딩되어 있다. "슈퍼맨"을 "닥터 스트레인지"와 "스플릿" 사이에 추가하라.
movie_rank.insert(1,"슈퍼맨")
print(movie_rank)
# 54.movie_rank 리스트에서 '럭키'를 삭제하라.
movie_rank.remove("럭키")
print(movie_rank)
# 55.movie_rank 리스트에서 '스플릿' 과 '배트맨'을 를 삭제하라.
del movie_rank[2]
del movie_rank[2]
print(movie_rank)
# ------------------------------------------------------------------2023-04-11--------------------------------------------------------------------------------
# 56.lang1과 lang2 리스트가 있을 때 lang1과 lang2의 원소를 모두 갖고 있는 langs 리스트를 만들어라.
lang1 = ["C", "C++", "JAVA"]
lang2 = ["Python", "Go", "C#"]
langs = lang1 + lang2
print(langs)
# 57.다음 리스트에서 최댓값과 최솟값을 출력하라. (힌트: min(), max() 함수 사용)
nums = [1, 2, 3, 4, 5, 6, 7]
nums_min = min(nums)
nums_max = max(nums)
print(nums_max)
print(nums_min)
# 58.다음 리스트의 합을 출력하라.
nums = [1, 2, 3, 4, 5]
print(sum(nums))
# ------------------------------------------------------------------2023-04-12--------------------------------------------------------------------------------
# 59.다음 리스트에 저장된 데이터의 개수를 화면에 구하하라.
cook = ["피자", "김밥", "만두", "양념치킨", "족발", "피자", "김치만두", "쫄면", "소시지", "라면", "팥빙수", "김치전"]
print(len(cook))
# 60.다음 리스트의 평균을 출력하라.
nums = [1, 2, 3, 4, 5]
avg = sum(nums) / len(nums)
print(avg)
# 61.price 변수에는 날짜와 종가 정보가 저장돼 있다. 날짜 정보를 제외하고 가격 정보만을 출력하라. (힌트 : 슬라이싱)
price = ['20180728', 100, 130, 140, 150, 160, 170]
print(price[1:])
# ------------------------------------------------------------------2023-04-13--------------------------------------------------------------------------------
# 62.슬라이싱을 사용해서 홀수만 출력하라.
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nums[::2])
# 63.슬라이싱을 사용해서 짝수만 출력하라.
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nums[1::2])
# 64.슬라이싱을 사용해서 리스트의 숫자를 역 방향으로 출력하라.
nums = [1, 2, 3, 4, 5]
print(nums[::-1])
# ------------------------------------------------------------------2023-04-14--------------------------------------------------------------------------------
# 65.interest 리스트에는 아래의 데이터가 바인딩되어 있다. interest 리스트를 사용하여 아래와 같이 화면에 출력하라. 출력 예시: 삼성전자 Naver
interest = ['삼성전자', 'LG전자', 'Naver']
print(interest[0], interest[2])
# 66.interest 리스트에는 아래의 데이터가 바인딩되어 있다. interest 리스트를 사용하여 아래와 같이 화면에 출력하라. 출력 예시: 삼성전자 LG전자 Naver SK하이닉스 미래에셋대우
interest = ['삼성전자', 'LG전자', 'Naver', 'SK하이닉스', '미래에셋대우']
print(" ".join(interest))
# 67.interest 리스트에는 아래의 데이터가 바인딩되어 있다. interest 리스트를 사용하여 아래와 같이 화면에 출력하라. 출력 예시: 삼성전자/LG전자/Naver/SK하이닉스/미래에셋대우
interest = ['삼성전자', 'LG전자', 'Naver', 'SK하이닉스', '미래에셋대우']
print("/".join(interest))
# ------------------------------------------------------------------2023-04-15--------------------------------------------------------------------------------
# 68.interest 리스트에는 아래의 데이터가 바인딩되어 있다. join() 메서드를 사용해서 interest 리스트를 아래와 같이 화면에 출력하라.
# 출력 예시:
# 삼성전자
# LG전자
# Naver
# SK하이닉스
# 미래에셋대우
interest = ['삼성전자', 'LG전자', 'Naver', 'SK하이닉스', '미래에셋대우']
print("\n".join(interest))
# 69.회사 이름이 슬래시 ('/')로 구분되어 하나의 문자열로 저장되어 있다. 이를 interest 이름의 리스트로 분리 저장하라.
string = "삼성전자/LG전자/Naver"
interest = string.split("/")
print(interest)
# 70.리스트에 있는 값을 오름차순으로 정렬하세요.
data = [2, 4, 3, 1, 5, 10, 9]
data.sort()
print(data)
# ------------------------------------------------------------------2023-04-16--------------------------------------------------------------------------------
# 71.my_variable 이름의 비어있는 튜플을 만들라.
my_variable = ()
print(type(my_variable))
# 72.2016년 11월 영화 예매 순위 기준 top3는 다음과 같다. 영화 제목을 movie_rank 이름의 튜플에 저장하라. (순위 정보는 저장하지 않는다.)
movie_rank = ("닥터 스트레인지", "스플릿", "럭키")
# 73.숫자 1 이 저장된 튜플을 생성하라.
my_tuple = (1)
print(type(my_tuple))
# ------------------------------------------------------------------2023-04-17--------------------------------------------------------------------------------
# 74.다음 코드를 실행해보고 오류가 발생하는 원인을 설명하라.
# >> t = (1, 2, 3)
# >> t[0] = 'a'
# Traceback (most recent call last):
#   File "<pyshell#46>", line 1, in <module>
#     t[0] = 'a'
# TypeError: 'tuple' object does not support item assignment
# 튜플은 원소의 값을 변경할수 없다.
# 75.아래와 같이 t에는 1, 2, 3, 4 데이터가 바인딩되어 있다. t가 바인딩하는 데이터 타입은 무엇인가?
# >> 원칙적으로 튜플은 괄호와 함께 데이터를 정의해야 하지만, 사용자 편의를 위해 괄호 없이도 동작합니다.
# 76.변수 t에는 아래와 같은 값이 저장되어 있다. 변수 t가 ('A', 'b', 'c') 튜플을 가리키도록 수정 하라.
t = ('a', 'b', 'c')
t = ('A', 'B', 'C')
print(t)
# ------------------------------------------------------------------2023-04-18--------------------------------------------------------------------------------
# 77.다음 튜플을 리스트로 변환하라.
interest = ('삼성전자', 'LG전자', 'SK Hynix')
list_in = list(interest)
# 78.다음 리스트를 튜플로 변경하라.
interest = ['삼성전자', 'LG전자', 'SK Hynix']
data = tuple(interest)
# 79.다음 코드의 실행 결과를 예상하라.
temp = ('apple', 'banana', 'cake')
a, b, c = temp
print(a, b, c)
# apple banana cake
# ------------------------------------------------------------------2023-04-19--------------------------------------------------------------------------------
# 80.1 부터 99까지의 정수 중 짝수만 저장된 튜플을 생성하라. (2, 4, 6, 8 ... 98)
data = tuple(range(2,100, 2))
print(data)
# 81.다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때, start expression을 사용하여 좌측 8개의 값을 valid_score 변수에 바인딩하여라.
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
*valid_score, _, _ = scores
print(valid_score)
# 82.다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때, start expression을 사용하여 우측 8개의 값을 valid_score 변수에 바인딩하여라.
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
a, b, *valid_score = scores
print(valid_score)
# ------------------------------------------------------------------2023-04-20--------------------------------------------------------------------------------
# 83.다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때, start expression을 사용하여 가운데 있는 8개의 값을 valid_score 변수에 바인딩하여라.
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
a, *valid_score, b = scores
print(valid_score)
# 84.temp 이름의 비어있는 딕셔너리를 만들라.
temp = {}
# 85.다음 아이스크림 이름과 희망 가격을 딕셔너리로 구성하라.
ice = {"메로나" : 1000, "폴라포" : 1200, "빵빠레" : 1800}
print(ice)
# ------------------------------------------------------------------2023-04-21--------------------------------------------------------------------------------
# 86.085 번의 딕셔너리에 아래 아이스크림 가격정보를 추가하라.
ice = {"메로나": 1000, "폴라포": 1200, "빵빠레": 1800}
ice["죠스비"] = 1200
ice["월드컵"] = 1500
print(ice)
# 87.다음 딕셔너리를 사용하여 메로나 가격을 출력하라.
ice = {'메로나': 1000,'폴라포': 1200,'빵빠레': 1800,'죠스바': 1200,'월드콘': 1500}
print("메로나 가격 : ", ice["메로나"])
# 88.다음 딕셔너리에서 메로나의 가격을 1300으로 수정하라.
ice = {'메로나': 1000,'폴라포': 1200,'빵빠레': 1800,'죠스바': 1200,'월드콘': 1500}
ice["메로나"] = 1300
print(ice)
# ------------------------------------------------------------------2023-04-22--------------------------------------------------------------------------------
# 89.다음 딕셔너리에서 메로나를 삭제하라.
ice = {'메로나': 1000,'폴라포': 1200,'빵빠레': 1800,'죠스바': 1200,'월드콘': 1500}
del ice["메로나"]
print(ice)
# 90.다음 코드에서 에러가 발생한 원인을 설명하라.
# >> icecream = {'폴라포': 1200, '빵빠레': 1800, '월드콘': 1500, '메로나': 1000}
# >> icecream['누가바']
# Traceback (most recent call last):
#   File "<pyshell#69>", line 1, in <module>
#     icecream['누가바']
# KeyError: '누가바'
# 딕셔너리에 없는 키를 사용해서 인덱싱하면 에러가 발생합니다.
# 91.아래의 표에서, 아이스크림 이름을 키값으로, (가격, 재고) 리스트를 딕셔너리의 값으로 저장하라. 딕셔너리의 이름은 inventory로 한다.
inventory = {"메로나": [300, 20], "비비빅": [400, 3], "죠스바": [250, 100]}
print(inventory)
# ------------------------------------------------------------------2023-04-23--------------------------------------------------------------------------------
# 92.inventory 딕셔너리에서 메로나의 가격을 화면에 출력하라.
inventory = {"메로나": [300, 20],
              "비비빅": [400, 3],
              "죠스바": [250, 100]}
print(inventory["메로나"][0], "원")
# 93.inventory 딕셔너리에서 메로나의 재고를 화면에 출력하라.
inventory = {"메로나": [300, 20],
              "비비빅": [400, 3],
              "죠스바": [250, 100]}
print(inventory["메로나"][1], "개")
# 94.inventory 딕셔너리에 아래 데이터를 추가하라.
inventory = {"메로나": [300, 20],
              "비비빅": [400, 3],
              "죠스바": [250, 100]}
inventory["월드컵"] = [500,7]
print(inventory)
# ------------------------------------------------------------------2023-04-24--------------------------------------------------------------------------------